---
import DefaultLayout from "../../../layouts/DefaultLayout.astro";
import { parseLocale, useTranslations } from "../../../utils/i18n";
import Page from "../../../layouts/pages/Page.astro";
import Meta from "../../../layouts/groups/Meta.astro";
import { defaultPropsAndParamsOptions, generateGetStaticIndexPaths } from "../../../utils/paths";
import { i18nProps } from "astro-loader-i18n";
import { defaultProjectsCollection } from "../../../collections/projects";
import Card from "../../../components/Card.astro";
import DateTime from "../../../components/DateTime.astro";

export const getStaticPaths = generateGetStaticIndexPaths("[...locale]/[projects]");

const {
  translations,
  data: { locale },
} = Astro.props;
const t = useTranslations(parseLocale(locale));

const filteredProjects = defaultProjectsCollection.filter((project) => project.data.locale === locale);

const projects = i18nProps(filteredProjects, {
  ...defaultPropsAndParamsOptions,
  routePattern: `${Astro.routePattern}/[project]`,
  generateSegments: (entry) => ({ project: entry.data.contentPath }),
});

// Group projects by status and sort by lastCommit date
const projectsByStatus = projects.reduce(
  (acc, project) => {
    const status = project.data.status || "unknown";
    if (!acc[status]) {
      acc[status] = [];
    }
    acc[status].push(project);
    return acc;
  },
  {} as Record<string, typeof projects>,
);

// Sort each status group by lastCommit date (most recent first)
Object.keys(projectsByStatus).forEach((status) => {
  projectsByStatus[status]?.sort((a, b) => {
    const dateA = a.data.gitInfo?.lastCommit?.date ? new Date(a.data.gitInfo.lastCommit.date) : new Date(0);
    const dateB = b.data.gitInfo?.lastCommit?.date ? new Date(b.data.gitInfo.lastCommit.date) : new Date(0);
    return dateB.getTime() - dateA.getTime();
  });
});
---

<DefaultLayout translations={translations}>
  <Meta slot="meta" title={t("projectsTitle")} />
  <Page>
    <h1 slot="title">{t("projectsTitle")}</h1>

    {
      Object.entries(projectsByStatus).map(([status, statusProjects]) => (
        <section>
          <h2>{t(status as "active" | "archived")}</h2>
          <div class="projects-grid">
            {statusProjects.map((project) => (
              <Card title={project.data.title} cover={project.data.cover} link={project.translatedPath}>
                {project.data.gitInfo?.lastCommit?.date && (
                  <DateTime slot="super-title" date={new Date(project.data.gitInfo.lastCommit.date)} />
                )}
                {project.data.summary}
              </Card>
            ))}
          </div>
        </section>
      ))
    }
  </Page>
</DefaultLayout>
