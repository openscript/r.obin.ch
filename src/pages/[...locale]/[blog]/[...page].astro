---
import type { GetStaticPaths } from "astro";
import DefaultLayout from "../../../layouts/DefaultLayout.astro";
import { parseLocale, useTranslations } from "../../../utils/i18n";
import Page from "../../../layouts/pages/Page.astro";
import PostCard from "../../../components/PostCard.astro";
import CardList from "../../../components/CardList.astro";
import Pagination from "../../../components/Pagination.astro";
import Meta from "../../../layouts/groups/Meta.astro";
import { i18nPropsAndParams } from "astro-loader-i18n";
import slug from "limax";
import { defaultBlogCollection } from "../../../collections/blog";
import {
  defaultPropsAndParamsOptions,
  resolvePath,
} from "../../../utils/paths";
import { C } from "../../../site.config";
import { render } from "astro:content";

export const getStaticPaths = (async ({ paginate }) => {
  const routePattern = "[...locale]/[blog]/[...slug]";
  const collection = defaultBlogCollection;

  const propsAndParams = i18nPropsAndParams(collection, {
    ...defaultPropsAndParamsOptions,
    routePattern,
    generateSegments: (entry) => ({ slug: `${entry.data.contentPath}/${slug(entry.data.title)}` }),
  });

  const locales = propsAndParams.reduce(
    (acc, item) => {
      acc[item.props.data.locale] = item.params.locale;
      return acc;
    },
    {} as Record<string, string | undefined>
  );

  return Object.entries(locales).flatMap(([propsLocale, paramsLocale]) => {
    const items = propsAndParams.filter(
      (item) => item.props.data.locale === propsLocale
    );
    const data = items.map((item) => item.props);
    const blog = C.SEGMENT_TRANSLATIONS[parseLocale(propsLocale)].blog;
    const translations = Object.entries(locales).reduce(
      (acc, [locale, slug]) => {
        acc[locale] = resolvePath(slug, blog);
        return acc;
      },
      {} as Record<string, string>
    );
    return paginate(data, {
      pageSize: C.SETTINGS.BLOG.PAGE_SIZE,
      params: {
        locale: paramsLocale,
        blog,
      },
      props: {
        locale: propsLocale,
        translations,
      },
    });
  });
}) satisfies GetStaticPaths;

const { page, locale, translations } = Astro.props;
const t = useTranslations(parseLocale(locale));
---

<style>
  :global(.vertical) {
    display: flex;
    flex-direction: column;
    gap: 1.4rem;
    margin: 1.4rem 0 !important;
  }
</style>

<DefaultLayout translations={translations}>
  <Meta slot="meta" title={t("blogTitle")} />
  <Page>
    <h1 slot="title">{t("blogTitle")}</h1>
    <Pagination page={page} />
    <CardList classNames="vertical">
      {
        page.data.map(async (post) => {
          const { remarkPluginFrontmatter } = await render(post);
          return (
            <li>
              <PostCard
                title={post.data.title}
                cover={post.data.cover}
                publishedAt={post.data.publishedAt}
                translatedPath={post.translatedPath}
                excerpt={remarkPluginFrontmatter.excerpt}
              />
            </li>
          );
        })
      }
    </CardList>
    <Pagination page={page} />
  </Page>
</DefaultLayout>
