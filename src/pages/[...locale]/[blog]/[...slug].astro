---
import DefaultLayout from "../../../layouts/DefaultLayout.astro";
import Post from "../../../layouts/pages/Post.astro";
import TableOfContents from "../../../components/TableOfContents.astro";
import GitInfo from "../../../components/GitInfo.astro";
import type { GitInfoFrontmatter } from "../../../remark/remark-git-info";
import { parseLocale, useTranslations } from "../../../utils/i18n";
import Comments from "../../../components/Comments.astro";
import Meta from "../../../layouts/groups/Meta.astro";
import { render } from "astro:content";
import { i18nPropsAndParams, resolvePath as originalResolvePath } from "astro-loader-i18n";
import { C } from "../../../site.config";
import { getCollection } from "astro:content";
import slug from "limax";
import { defaultPropsAndParamsOptions, resolvePath } from "../../../utils/paths";

export const getStaticPaths = async () => {
  const routePattern = "[...locale]/[blog]/[...slug]";
  const collection = await getCollection("blog");

  return i18nPropsAndParams(collection, {
    ...defaultPropsAndParamsOptions,
    routePattern,
    generateSegments: (entry) => ({ slug: `${entry.data.contentPath}/${slug(entry.data.title)}` }),
  });
};

const {
  translations,
  data: { tags, locale, title, publishedAt },
} = Astro.props;

const { Content, headings, remarkPluginFrontmatter } = await render(
  Astro.props,
);

const paramsBlog = C.SEGMENT_TRANSLATIONS[parseLocale(locale)].blog;

const blogPath =
  locale === C.DEFAULT_LOCALE
    ? originalResolvePath(paramsBlog)
    : originalResolvePath(locale, paramsBlog);

const git: GitInfoFrontmatter["git"] = remarkPluginFrontmatter.git;
const t = useTranslations(parseLocale(locale));
---

<DefaultLayout translations={translations}>
  <Meta slot="meta" title={title} />
  <Post frontmatter={{ title, publishedAt }}>
    <TableOfContents slot="left" headings={headings} />
    <Content />
    <Comments />
    <Fragment slot="right">
      <GitInfo git={git}>
        <Fragment slot="after">
          <dt>{t("tagsLabel")}</dt>
          <dd>
            {
              tags.map((tag) => (
                <a href={resolvePath(blogPath, slug(tag))}>
                  {tag}
                </a>
              ))
            }
          </dd>
        </Fragment>
      </GitInfo>
    </Fragment>
  </Post>
</DefaultLayout>
