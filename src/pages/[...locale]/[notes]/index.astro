---
import DefaultLayout from "../../../layouts/DefaultLayout.astro";
import { parseLocale, useTranslations } from "../../../utils/i18n";
import Page from "../../../layouts/pages/Page.astro";
import Meta from "../../../layouts/groups/Meta.astro";
import NotesList from "../../../components/NoteList.astro";
import { defaultPropsAndParamsOptions, generateGetStaticIndexPaths } from "../../../utils/paths";
import { i18nProps } from "astro-loader-i18n";
import slug from "limax";
import { defaultNotesCollection } from "../../../collections/notes";
import { getGitInfo, type GitInfoFrontmatter } from "../../../remark/remark-git-info";
import { render } from "astro:content";

export const getStaticPaths = generateGetStaticIndexPaths(
  "[...locale]/[notes]",
);

const {
  translations,
  data: { locale },
} = Astro.props;
const t = useTranslations(parseLocale(locale));

const collection = defaultNotesCollection;
const notes = i18nProps(collection, {
  ...defaultPropsAndParamsOptions,
  routePattern: `${Astro.routePattern}/[...note]`,
  generateSegments: (entry) => ({ note: `${entry.data.contentPath}/${slug(entry.data.title)}` }),
});

type NestedNotes = {
  [key: string]: NestedNotes | { note: { path: string; title: string; gitInfo?: GitInfoFrontmatter } };
};

const notesWithGitInfo = await Promise.all(
  notes.map(async (note) => {
    const { remarkPluginFrontmatter } = await render(note);
    const gitInfo = getGitInfo(remarkPluginFrontmatter)
    return {
      ...note,
      gitInfo,
    };
  })
);

const nestedNotes = notesWithGitInfo.reduce<NestedNotes>((acc, note) => {
  const pathSegments = note.data.contentPath.split("/").filter(Boolean);
  pathSegments.push(slug(note.data.title));
  let current = acc;

  pathSegments.forEach((segment, index) => {
    if (!current[segment]) {
      current[segment] = {};
    }

    if (index === pathSegments.length - 1) {
      current[segment].note = {
        title: note.data.title,
        path: note.translatedPath,
        gitInfo: note.gitInfo
      };
    } else {
      current = current[segment] as NestedNotes;
    }
  });

  return acc;
}, {});

---

<DefaultLayout translations={translations}>
  <Meta slot="meta" title={t("notesTitle")} />
  <Page>
    <h1>{t("notesTitle")}</h1>
    <NotesList notes={nestedNotes} />
  </Page>
</DefaultLayout>
