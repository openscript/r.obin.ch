---
type Props = {
  value: string;
};

function hashString(str: string) {
  let hash = 0;
  for (let i = 0; i < str.length; i++) {
    hash = str.charCodeAt(i) + ((hash << 5) - hash);
  }
  return hash;
}

function intToRGB(i: number) {
  const c = (i & 0x00ffffff).toString(16).toUpperCase();

  return "00000".substring(0, 6 - c.length) + c;
}

function deriveColorsFromString(str: string) {
  const hash = hashString(str);
  const startColor = `#${intToRGB(hash)}`;
  const endColor = `#${intToRGB(hash + 100)}`;
  return { startColor, endColor };
}

const { value, ...rest } = Astro.props;
const { startColor, endColor } = deriveColorsFromString(value);
const gradientId = `grad-${intToRGB(hashString(value))}`;
---

<svg xmlns="http://www.w3.org/2000/svg" {...rest}>
  <defs>
    <linearGradient id={gradientId} x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style={`stop-color:${startColor};stop-opacity:1`}></stop>
      <stop offset="100%" style={`stop-color:${endColor};stop-opacity:1`}></stop>
    </linearGradient>
    <filter id="fractalNoise">
      <feTurbulence type="fractalNoise" baseFrequency="0.5" numOctaves="6" result="noise" stitchTiles="stitch"
      ></feTurbulence>
      <feBlend in="SourceGraphic" in2="noise" mode="multiply"></feBlend>
      <feColorMatrix in="noisy" type="saturate" values="0.7"></feColorMatrix>
    </filter>
  </defs>
  <rect width="100%" height="100%" fill={`url(#${gradientId})`} filter="url(#fractalNoise)"></rect>
</svg>
