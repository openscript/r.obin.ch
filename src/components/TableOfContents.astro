---
import { parseLocale, useTranslations } from "../utils/i18n";
import Details from "./Details.astro";

type Props = {
  fromDepth?: number;
  headings: { slug: string; text: string; depth: number }[];
};

const { headings: headingsProp, fromDepth: fromDepthProp } = Astro.props;
const fromDepth = fromDepthProp || 2;
const headings = headingsProp.filter((heading) => heading.depth >= fromDepth);
const locale = parseLocale(Astro.currentLocale);
const t = useTranslations(locale);
---

<style define:vars={{ "from-depth": fromDepth }}>
  .table-of-contents {
  }

  ul {
    padding: 0;
    margin-bottom: 0;
  }

  li {
    margin: 0.5rem 0;
  }

  li.active {
    font-weight: bold;
  }

  li:last-of-type {
    margin-bottom: 0;
  }

  a {
    text-decoration: none;
  }

  .depth-2 {
    margin-left: 1ch;
  }

  .depth-3 {
    margin-left: 3ch;
  }

  .depth-4 {
    margin-left: 5ch;
  }

  .depth-5 {
    margin-left: 7ch;
  }

  .depth-6 {
    margin-left: 9ch;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        const id = entry.target.getAttribute("id");
        if (!id) return;
        const parent = document.querySelector(
          `nav li a[href="#${id}"]`,
        )?.parentElement;
        if (!parent) return;
        if (entry.intersectionRatio > 0) {
          parent.classList.add("active");
        } else {
          parent.classList.remove("active");
        }
      });
    });

    // Track all sections that have an `id` applied
    document.querySelectorAll(".table-of-contents a").forEach((a) => {
      const href = a.getAttribute("href");
      if (!href) return;
      if (!href.startsWith("#")) return;

      const heading = document.getElementById(href.slice(1));
      if (!heading) return;

      observer.observe(heading);
    });
  });
</script>

<Details defaultOpen={true} title={t("tableOfContentsLabel")}>
  <nav class="table-of-contents">
    <ul>
      {
        headings.map((heading) => (
          <li class={`depth-${heading.depth}`}>
            <a href={`#${heading.slug}`}>{heading.text}</a>
          </li>
        ))
      }
    </ul>
  </nav>
</Details>
