{"version":3,"file":"component---src-templates-blog-tsx-99d4ea2c1b0df707c3ad.js","mappings":"oMAIA,IAAMA,EAAc,6CAYb,SAASC,EAAT,GAAkF,IAA9DC,EAA6D,EAA7DA,QAASC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,YAAaC,EAA0B,EAA1BA,QAC5D,OACEC,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,IAAKR,IACRO,EAAAA,EAAAA,IAACE,EAAAA,KAAD,CAAMC,GAAIP,IACRI,EAAAA,EAAAA,IAAAA,KAAAA,KAAKH,GACJE,GACDC,EAAAA,EAAAA,IAACI,EAAAA,cAAD,CAAeC,MAAOP,IAHxB,KAGwCE,EAAAA,EAAAA,IAACM,EAAAA,cAAD,CAAeD,MAAOP,IAC3DH,I,cCfF,SAASY,EAAT,GAAkE,IAA5CC,EAA2C,EAA3CA,YAAaC,EAA8B,EAA9BA,UACxC,GAAIA,GAAa,EACf,OAAO,KAGT,IAAIC,EAAa,GACbC,EAAY,GACZC,EAAY,GACZC,EAAa,GAwBjB,OAtBoB,IAAhBL,IACFE,EAAU,MAGQ,IAAhBF,EACFG,EAAS,MACAH,EAAc,IACvBG,EAAS,OAASH,EAAc,IAGd,IAAhBA,EACFI,EAAS,KAAQJ,EACRA,IAAgBC,IACzBG,EAAS,MAASJ,GAGA,IAAhBA,EACFK,EAAU,MAAQJ,EAAY,GACrBD,IAAgBC,IACzBI,EAAU,OAASJ,EAAY,KAI/BT,EAAAA,EAAAA,IAACc,EAAAA,SAAD,KACGJ,IAAcV,EAAAA,EAAAA,IAACE,EAAAA,KAAD,CAAMC,GAAG,MAAT,UACdQ,IAAaX,EAAAA,EAAAA,IAACE,EAAAA,KAAD,CAAMC,GAAIQ,GAAV,SACbC,IAAaZ,EAAAA,EAAAA,IAACE,EAAAA,KAAD,CAAMC,GAAIS,GAAV,SACbC,IAAcb,EAAAA,EAAAA,IAACE,EAAAA,KAAD,CAAMC,GAAIU,GAAV,W,aC7CRE,EACJ,CACLC,KAAM,QACNC,IAAK,QCQF,SAASC,EAAT,GAAkD,IAA/BC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,KAChC,OAAKD,GAIHnB,EAAAA,EAAAA,IAAAA,KAAAA,KACGoB,aADH,EACGA,EAAMC,KAAI,SAAAC,GAAC,OACVtB,EAAAA,EAAAA,IAAAA,KAAAA,MACEA,EAAAA,EAAAA,IAACuB,EAAAA,cAAD,CAAepB,GAAOY,EAAoBE,IAAzB,IAAgCK,EAAEE,MAASF,EAAEzB,YAN7D,K,cCJI,SAAS4B,EAAT,GAAmF,IAAnEC,EAAkE,EAAlEA,KAAMC,EAA4D,EAA5DA,YACnC,OACE3B,EAAAA,EAAAA,IAAC4B,EAAAA,EAAD,MACE5B,EAAAA,EAAAA,IAAAA,KAAAA,MACEA,EAAAA,EAAAA,IAAC6B,EAAAA,EAAD,CAAkBC,GAAG,qBAEtBJ,EAAKK,MAAMC,MAAMX,KAAI,SAAAY,GAAS,IAAD,IAC5B,GAAI,UAACA,EAAKC,cAAN,QAACC,EAAavC,MAAQ,UAACqC,EAAKG,mBAAN,QAACC,EAAkBxC,OAAiD,iBAAjCoC,EAAKG,YAAYtC,YAC5E,OAAO,KAET,IAAMC,GAAUC,EAAAA,EAAAA,IAACkB,EAAD,CAASC,OAAQc,EAAKC,OAAOf,OAAQC,KAAMa,EAAKC,OAAOd,OACvE,OACEpB,EAAAA,EAAAA,IAACN,EAAD,CACEC,QAASsC,EAAKtC,QACdC,KAAMqC,EAAKC,OAAOtC,KAClBC,MAAOoC,EAAKG,YAAYvC,MACxBC,YAAamC,EAAKG,YAAYtC,YAC9BC,QAASA,QAIfC,EAAAA,EAAAA,IAACO,EAAD,CAAYC,YAAamB,EAAYnB,YAAaC,UAAWkB,EAAYlB","sources":["webpack://r.obin.ch/./src/components/BlogItem.tsx","webpack://r.obin.ch/./src/components/Pagination.tsx","webpack://r.obin.ch/./src/configuration.ts","webpack://r.obin.ch/./src/components/TagList.tsx","webpack://r.obin.ch/./src/templates/Blog.tsx"],"sourcesContent":["import { css } from '@emotion/react';\nimport { Link } from 'gatsby';\nimport { FormattedDate, FormattedTime } from 'react-intl';\n\nconst blogItemStyles = css`\n  margin-bottom: 2rem;\n`;\n\ntype BlogItemProps = {\n  excerpt: string;\n  path: string;\n  title: string;\n  publishedAt: string;\n  tagList: JSX.Element;\n};\n\nexport function BlogItem({ excerpt, path, title, publishedAt, tagList }: BlogItemProps) {\n  return (\n    <div css={blogItemStyles}>\n      <Link to={path}>\n        <h2>{title}</h2>\n        {tagList}\n        <FormattedDate value={publishedAt} /> <FormattedTime value={publishedAt} />\n        {excerpt}\n      </Link>\n    </div>\n  );\n}\n","import { Link } from 'gatsby';\nimport { Fragment } from 'react';\n\ntype PaginationProps = {\n  currentPage: number;\n  pageCount: number;\n};\n\nexport function Pagination({ currentPage, pageCount }: PaginationProps) {\n  if (pageCount <= 1) {\n    return null;\n  }\n\n  let newestPath = '';\n  let newerPath = '';\n  let olderPath = '';\n  let oldestPath = '';\n\n  if (currentPage !== 1) {\n    newestPath = `..`;\n  }\n\n  if (currentPage === 2) {\n    newerPath = `../`;\n  } else if (currentPage > 1) {\n    newerPath = `../${currentPage - 2}`;\n  }\n\n  if (currentPage === 1) {\n    olderPath = `./${currentPage}`;\n  } else if (currentPage !== pageCount) {\n    olderPath = `../${currentPage}`;\n  }\n\n  if (currentPage === 1) {\n    oldestPath = `./${pageCount - 1}`;\n  } else if (currentPage !== pageCount) {\n    oldestPath = `../${pageCount - 1}`;\n  }\n\n  return (\n    <Fragment>\n      {newestPath && <Link to=\"..\">Newest</Link>}\n      {newerPath && <Link to={newerPath}>Newer</Link>}\n      {olderPath && <Link to={olderPath}>Older</Link>}\n      {oldestPath && <Link to={oldestPath}>Oldest</Link>}\n    </Fragment>\n  );\n}\n","export const CONFIGURATION = {\n  PATHS: {\n    BLOG: '/blog',\n    TAG: '/tag',\n  },\n  PAGINATION: {\n    ITEMS_PER_PAGE: 10,\n  },\n};\n","import { LocalizedLink } from 'gatsby-plugin-i18n-l10n';\nimport { CONFIGURATION } from '../configuration';\n\ntype TagListProps = {\n  locale?: string;\n  tags?: {\n    slug?: string;\n    title?: string;\n  }[];\n};\n\nexport function TagList({ locale, tags }: TagListProps) {\n  if (!locale) {\n    return null;\n  }\n  return (\n    <ul>\n      {tags?.map(t => (\n        <li>\n          <LocalizedLink to={`${CONFIGURATION.PATHS.TAG}/${t.slug}`}>{t.title}</LocalizedLink>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { graphql, PageProps } from 'gatsby';\nimport { FormattedMessage } from 'react-intl';\nimport { BlogPageQuery } from '../../graphql-types';\nimport { BlogItem } from '../components/BlogItem';\nimport { Pagination } from '../components/Pagination';\nimport { TagList } from '../components/TagList';\nimport { DefaultLayout } from '../layouts/DefaultLayout';\nimport { PaginationContext } from '../types';\n\nexport default function Blog({ data, pageContext }: PageProps<BlogPageQuery, PaginationContext>) {\n  return (\n    <DefaultLayout>\n      <h1>\n        <FormattedMessage id=\"page.blog.title\" />\n      </h1>\n      {data.posts.nodes.map(post => {\n        if (!post.fields?.path || !post.frontmatter?.title || typeof post.frontmatter.publishedAt !== 'string') {\n          return null;\n        }\n        const tagList = <TagList locale={post.fields.locale} tags={post.fields.tags} />;\n        return (\n          <BlogItem\n            excerpt={post.excerpt}\n            path={post.fields.path}\n            title={post.frontmatter.title}\n            publishedAt={post.frontmatter.publishedAt}\n            tagList={tagList}\n          />\n        );\n      })}\n      <Pagination currentPage={pageContext.currentPage} pageCount={pageContext.pageCount} />\n    </DefaultLayout>\n  );\n}\n\nexport const query = graphql`\n  query BlogPage($locale: String!, $limit: Int!, $skip: Int!) {\n    posts: allMdx(\n      filter: { fields: { kind: { glob: \"blog/**\" }, locale: { eq: $locale } } }\n      sort: { fields: frontmatter___publishedAt, order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      nodes {\n        excerpt\n        fields {\n          locale\n          path\n          pathPrefix\n          tags {\n            slug\n            title\n          }\n        }\n        frontmatter {\n          title\n          publishedAt\n        }\n      }\n    }\n  }\n`;\n"],"names":["blogItemStyles","BlogItem","excerpt","path","title","publishedAt","tagList","___EmotionJSX","css","Link","to","FormattedDate","value","FormattedTime","Pagination","currentPage","pageCount","newestPath","newerPath","olderPath","oldestPath","Fragment","CONFIGURATION","BLOG","TAG","TagList","locale","tags","map","t","LocalizedLink","slug","Blog","data","pageContext","DefaultLayout","FormattedMessage","id","posts","nodes","post","fields","_post$fields","frontmatter","_post$frontmatter"],"sourceRoot":""}